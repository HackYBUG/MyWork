//---------------------------------------------------------------------------

#pragma hdrstop

#include "RedblackTree.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


/*
 * 对红黑树的节点(x)进行左旋转
 *
 * 左旋示意图(对节点x进行左旋)：
 *      px                              px
 *     /                               /
 *    x                               y
 *   /  \      --(左旋)-->           / \                #
 *  lx   y                          x  ry
 *     /   \                       /  \
 *    ly   ry                     lx  ly
 *
 *
 */
 template<class T>
 void RBTree<T>::leftRotate(RBTNode<T>* &root,RBTNode<T>* x)
 {
	//设置x的右孩子为y
	RBTNode<T>* y = x->right;
	//将“y的左孩子，设置为”x的右孩子"
	//如果y的左孩子非空，将x设为“y的左孩子的父亲”
	x->right = y->left;
	if(y->left != NULL)
		y->parent = x;
	//将x的父亲设为Y的父亲
	y->parent = x->parent;
	if(x->parent == NULL)
	{
		root = y;
	}
	else
	{
		if(x->parent->left == x)
			x->parent->left = y;
		else
			x->parent->right = y;
	}
	//将“x" 设为“Y的左孩子”
	y->left = x;
	//将“x的父节点设置为y
	x->parent = y;

 }
 /*
 * 对红黑树的节点(y)进行右旋转
 *
 * 右旋示意图(对节点y进行左旋)：
 *            py                               py
 *           /                                /
 *          y                                x
 *         /  \      --(右旋)-->            /  \                     #
 *        x   ry                           lx   y
 *       / \                                   / \                   #
 *      lx  rx                                rx  ry
 *
 */
 template<class T>
 void RBTree<T>::rightRotate(RBTNode<T>* &root, RBTNode<T>* y)
 {
	 //将y的左孩子设置为 x
	 RBTNode<T>* x = y->left;
	 //将x的右孩子设置为y的左孩子，
	 //如果x的右孩子非空，将它的父节点设置为y
	 y->left = x->right;
	 if(x->right != NULL)  x->right->parent = y;
	 //将Y的父亲设置为x的父节点
	 x->parent = y->parent;
	 if(y->parent == NULL)
	 {
		 root = x;
	 }
	 else
	 {
		 if(y->parent->left == y)
			y->parent->left = x;
		 else
			y->parent->right = x;
	 }
	 //将x的右节点设置为y
	 x->right = y;
	 //将y的父节点设置为 x
	 y->parent = x;

 }

